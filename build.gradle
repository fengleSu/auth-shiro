buildscript {
	ext {
		springBootVersion = '1.5.9.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

group = 'com.fl.auth'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}


// mybatis generator
configurations {
	mybatisGenerator
}

dependencies {
    // spring
	compile'org.springframework.boot:spring-boot-starter-web'
	testCompile 'org.springframework.boot:spring-boot-starter-test'
	// shiro
	compile 'org.apache.shiro:shiro-core:1.4.0'
	compile 'org.apache.shiro:shiro-spring:1.4.0'
    // db
    compile 'org.mybatis.generator:mybatis-generator-core:1.3.5'
    compile 'mysql:mysql-connector-java:6.0.6'
    compile 'tk.mybatis:mapper:3.4.5'
    compile 'org.mybatis:mybatis:3.4.5'
    compile 'org.mybatis:mybatis-spring:1.3.1'

    //utils
    compile 'org.apache.commons:commons-lang3:3.7'
	// mybatis generator
	mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.5'
	mybatisGenerator 'mysql:mysql-connector-java:6.0.6'
	mybatisGenerator 'tk.mybatis:mapper:3.4.5'
}

// mybatis generator
def initDbProperties = {
    def properties = new Properties()
    file("src/main/resources/db.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties;
}
task mybatisGenerate << {
    def properties = initDbProperties()
    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
    ant.properties['username'] = properties.getProperty("jdbc.user")
    ant.properties['password'] = properties.getProperty("jdbc.pass")
    ant.properties['schema'] = properties.getProperty("jdbc.schema")
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = this.modelPackage
    ant.properties['mapperPackage'] = this.mapperPackage
    ant.properties['sqlMapperPackage'] = this.sqlMapperPackage
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/db/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'username')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'schema')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}